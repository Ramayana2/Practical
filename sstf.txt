2)Write a simulation program for disk scheduling using SSTF algorithm. Accept total number of disk blocks, disk request string, and current head position from the user. Display the list of request in the order in which it is served. Also display the total number of head moments.
#include<stdio.h>

int ReqString[20],nor,nob,start,thm;
void sort(int RS[])
{
	int i,j,temp;
	for(i=1;i<nor;i++)
	{
		for(j=0;j<nor-i;j++)
		{
			if(RS[j]>RS[j+1])
			{
				temp=RS[j];
				RS[j]=RS[j+1];
				RS[j+1]=temp;
			}
		}

	}
}
void display(int RS[])
{
	int i;

	for(i=0;i<nor;i++)
		printf("  %d",RS[i]);
}
int searchstartblock(int RS[])
{
	int i;

	for(i=0;i<nor;i++)
	{
		if(RS[i]==start)
			return i;
	}
	return 1;
}

main()
{
	int i,j,k,ans,finish=0,leftpos,startpos,rightpos,leftdis,rightdis,initpos,flag=0;

	printf("\nEnter No.of Requests: ");
	scanf("%d",&nor);
	printf("\nEnter Requests:\n");
	for(i=0;i<nor;i++)
	{
		printf("[%d]=",i);
		scanf("%d",&ReqString[i]);
	}
	printf("\nEnter No.of Cylinders: ");
	scanf("%d",&nob);
	printf("\nEnter Start Block: ");
	scanf("%d",&start);
	ans=searchstartblock(ReqString);
	if(ans==1)
		ReqString[nor++]=start;
	sort(ReqString);
	printf("\nRefString After Sorting: ");
	display(ReqString);
	startpos=searchstartblock(ReqString);
	initpos=startpos;
	leftpos=initpos-1;
	rightpos=initpos+1;
	while(1)
	{
		leftdis=ReqString[startpos]-ReqString[leftpos];
		rightdis=ReqString[rightpos]-ReqString[startpos];

		if(leftdis<rightdis)
		{
		printf("\n%d-%d",ReqString[startpos],ReqString[leftpos]);
			thm+=ReqString[startpos]-ReqString[leftpos];
			startpos=leftpos;
			leftpos--;
			if(leftpos==-1)
			{
				break;
			}
			     
		}
		else if(leftdis>rightdis)
		{
			printf("\n%d-%d",ReqString[rightpos],ReqString[startpos]);
			thm+=ReqString[rightpos]-ReqString[startpos];
			startpos=rightpos;
			rightpos++;
			if(rightpos==nor)
			{
				break;
			}
		}

	}
        printf("\nEnd of while loop");
	while(leftpos>=0)
	{
		printf("\n%d-%d",ReqString[startpos],ReqString[leftpos]);
		thm+=ReqString[startpos]-ReqString[leftpos];
		startpos=leftpos;
		leftpos--;
	}
	while(rightpos<nor)
	{
		printf("\n%d-%d",ReqString[rightpos],ReqString[startpos]);
		thm+=ReqString[rightpos]-ReqString[startpos];
		startpos=rightpos;
		rightpos++;
	}
	printf("\nTotal Head Movement: %d",thm);

}

/*
[root@localhost disc sheduling]# cc sstf.c
[root@localhost disc sheduling]# ./a.out

Enter No.of Requests: 7

Enter Requests:
[0]=70
[1]=91
[2]=95
[3]=102
[4]=130
[5]=147
[6]=170

Enter No.of Cylinders: 200

Enter Start Block: 125

RefString After Sorting:   70  91  95  102  125  130  147  170
130-125
147-130
170-147
End of while loop
170-102
102-95
95-91
91-70
Total Head Movement: 145[root@localhost disc sheduling]# cc sstf.c
[root@localhost disc sheduling]# ./a.out

Enter No.of Requests: 8

Enter Requests:
[0]=11
[1]=34
[2]=62
[3]=64
[4]=95
[5]=119
[6]=123
[7]=180

Enter No.of Cylinders: 200

Enter Start Block: 50\

RefString After Sorting:   11  34  50  62  64  95  119  123  180
62-50
64-62
64-34
34-11
End of while loop
95-11
119-95
123-119
180-123
Total Head Movement: 236*/